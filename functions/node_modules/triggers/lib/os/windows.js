// example: dbus-monitor "type='signal',sender='org.gnome.TypingMonitor',interface='org.gnome.TypingMonitor'"

var Emitter = require('events').EventEmitter;

var command = [require('path').join(__dirname, '..', '..', 'bin', 'lightevt.exe'), '--monitor'];

const EVENTS = {
  media: {
    events: {
       'usb-media-inserted'   : ['media', 'inserted'],
       'usb-media-removed'    : ['media', 'removed']
    }
  },
  network: {
    events: {
      'address-changed'       : ['network', 'state_changed']
    },
  },
  power: {
    events: {
      'low-battery'           : ['power', 'low_power'],
      'power-status-changed'  : ['power', 'state_changed']
    }
  },
  session: {
    events: {
      'session-logged-on'     : ['session', 'started'],
      'session-locked'        : ['session', 'locked'],
      'session-unlocked'      : ['session', 'unlocked'],
      'session-logged-off'    : ['session', 'finished']
    }
  },
  system: {
    events: {
       'os-about-to-suspend'  : ['system', 'suspended'],
       'resumed-from-suspend' : ['system', 'unsuspended'],
       'os-about-to-shutdown' : ['system', 'shutdown']
    }
  }

}

var resolve_event = function(name, type) {
  if (type != 'all')
    return EVENTS[type].events[name];

  for (var type in EVENTS) {
    if (EVENTS[type].events[name])
      return EVENTS[type].events[name];
  }
};

var matches_opts = function(data, opts) {
  var matches = true;
  for (var key in data){
    if (opts[key] && opts[key] != data[key])
      matches = false;
  }
  return matches;
};

var matches_type = function(key, type){
  if (type == 'all')
    return true;
  else
    return !!EVENTS[type].events[key];
};


var Watcher = function(main_emitter, child, type, emitter) {

  var self = this;
  this.emitter = emitter || new Emitter();

  var parse_data = function(data) {
    data.toString().trim().split('\n').forEach(function(line) {

      var split = line.split(':'),
          name  = split[0],
          data  = split[1];

      if (matches_type(name, type)) {
        var event = resolve_event(name, type);

        if (!event)
          return; // emitter.emit(data.member, args);

        main_emitter.emit('event', event.join('_'));
        main_emitter.emit(event.join('_'));
        self.emitter.emit(event[1]);
      }

    })
  }

  child.stdout.on('data', parse_data);

  this.stop = function() {
    child.stdout.removeListener('data', parse_data);
  }

}

exports.command = command;
exports.Watcher = Watcher;
exports.EVENTS  = EVENTS;

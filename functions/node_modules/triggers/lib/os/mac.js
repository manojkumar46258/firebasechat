var fs      = require('fs'),
    Emitter = require('events').EventEmitter;

var command = ['scutil'];

const EVENTS = {
  network: {
    key: 'State:/Network/Global/IPv4',
    event: 'state_changed'
  },
  power: {
    // key: 'State:/IOKit/LowBatteryWarning',
    key: 'State:/IOKit/PowerAdapter',
    // key: 'State:/IOKit/PowerSources/InternalBattery-0',
    event: 'state_changed'
  },
  media: {
    events: [ 'inserted', 'removed' ]
  }
}

var MediaWatcher = function(main_emitter, child, type) {

  var self     = this,
      path     = '/Volumes',
      previous = [];

  fs.readdir(path, function(err, dirs){
    previous = dirs;
  })

  var emit = function(event, item){
    main_emitter.emit('event', 'media_' + event, item)
    main_emitter.emit('media_' + event, item);
    self.emitter.emit(event, item);
  }

  this.watcher = fs.watch(path, function(event){
    fs.readdir(path, function(err, current){
      previous.forEach(function(item){
        if (current.indexOf(item) == -1) // removed
          emit('removed', item);
      })
      current.forEach(function(item){
        if (previous.indexOf(item) == -1) // inserted
          emit('inserted', item);
      })
      previous = current;
    });
  })

  this.stop    = function() {
    this.watcher.close();
  }
}

var get_keys = function(type){
  if (type == 'all')
    return Object.keys(EVENTS).map(function(t){ return EVENTS[t].key })
  else
    return [EVENTS[type].key];
}

var figure_type = function(key) {
  for (var type in EVENTS) {
    if (EVENTS[type].key == key)
      return type;
  }
}

var Watcher = function(main_emitter, child, type, emitter) {

  var self     = this;
  this.emitter = emitter || new Emitter();

  if (type == 'media')
    return MediaWatcher.call(this, main_emitter, child, type);

  var type_keys = get_keys(type);

  var parse_data = function(data){
    var str = data.toString().trim();

    if (str.match(/changed\s?key/i)) {
      var split = str.split(/\s+/),
          key   = split[split.length-1];

      if (type_keys.indexOf(key) == -1)
        return;

      var type        = figure_type(key),
          event_name  = EVENTS[type].event,
          full_name   = type + '_' + event_name;

      main_emitter.emit('event', full_name);
      main_emitter.emit(type + '_' + event_name);
      self.emitter.emit(event_name);
    }
  }

  child.stdout.on('data', parse_data);

  this.stop = function(){
    child.stdout.removeListener('data', parse_data);
  }

  child.stdin.write('n.cancel' + '\n');
  type_keys.forEach(function(key){
    child.stdin.write('n.add ' + key + '\n');
  })
  child.stdin.write('n.watch' + '\n');
}


exports.command = command;
exports.Watcher = Watcher;
exports.EVENTS  = EVENTS;
